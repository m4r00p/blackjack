webpackJsonp([2,3],{446:function(n,e,t){t(847)(t(808))},808:function(n,e){n.exports="'use strict';\n\nvar Deck = (function () {\n  'use strict';\n\n  var ticking;\n  var animations = [];\n\n  function animationFrames(delay, duration) {\n    var now = Date.now();\n\n    // calculate animation start/end times\n    var start = now + delay;\n    var end = start + duration;\n\n    var animation = {\n      start: start,\n      end: end\n    };\n\n    // add animation\n    animations.push(animation);\n\n    if (!ticking) {\n      // start ticking\n      ticking = true;\n      requestAnimationFrame(tick);\n    }\n    var self = {\n      start: function start(cb) {\n        // add start callback (just one)\n        animation.startcb = cb;\n        return self;\n      },\n      progress: function progress(cb) {\n        // add progress callback (just one)\n        animation.progresscb = cb;\n        return self;\n      },\n      end: function end(cb) {\n        // add end callback (just one)\n        animation.endcb = cb;\n        return self;\n      }\n    };\n    return self;\n  }\n\n  function tick() {\n    var now = Date.now();\n\n    if (!animations.length) {\n      // stop ticking\n      ticking = false;\n      return;\n    }\n\n    for (var i = 0, animation; i < animations.length; i++) {\n      animation = animations[i];\n      if (now < animation.start) {\n        // animation not yet started..\n        continue;\n      }\n      if (!animation.started) {\n        // animation starts\n        animation.started = true;\n        animation.startcb && animation.startcb();\n      }\n      // animation progress\n      var t = (now - animation.start) / (animation.end - animation.start);\n      animation.progresscb && animation.progresscb(t < 1 ? t : 1);\n      if (now > animation.end) {\n        // animation ended\n        animation.endcb && animation.endcb();\n        animations.splice(i--, 1);\n        continue;\n      }\n    }\n    requestAnimationFrame(tick);\n  }\n\n  // fallback\n  window.requestAnimationFrame || (window.requestAnimationFrame = function (cb) {\n    setTimeout(cb, 0);\n  });\n\n  var style = document.createElement('p').style;\n  var memoized = {};\n\n  function prefix(param) {\n    if (typeof memoized[param] !== 'undefined') {\n      return memoized[param];\n    }\n\n    if (typeof style[param] !== 'undefined') {\n      memoized[param] = param;\n      return param;\n    }\n\n    var camelCase = param[0].toUpperCase() + param.slice(1);\n    var prefixes = ['webkit', 'moz', 'Moz', 'ms', 'o'];\n    var test;\n\n    for (var i = 0, len = prefixes.length; i < len; i++) {\n      test = prefixes[i] + camelCase;\n      if (typeof style[test] !== 'undefined') {\n        memoized[param] = test;\n        return test;\n      }\n    }\n  }\n\n  var has3d;\n\n  function translate(a, b, c) {\n    typeof has3d !== 'undefined' || (has3d = check3d());\n\n    c = c || 0;\n\n    if (has3d) {\n      return 'translate3d(' + a + ', ' + b + ', ' + c + ')';\n    } else {\n      return 'translate(' + a + ', ' + b + ')';\n    }\n  }\n\n  function check3d() {\n    // I admit, this line is stealed from the great Velocity.js!\n    // http://julian.com/research/velocity/\n    var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n    if (!isMobile) {\n      return false;\n    }\n\n    var transform = prefix('transform');\n    var $p = document.createElement('p');\n\n    document.body.appendChild($p);\n    $p.style[transform] = 'translate3d(1px,1px,1px)';\n\n    has3d = $p.style[transform];\n    has3d = has3d != null && has3d.length && has3d !== 'none';\n\n    document.body.removeChild($p);\n\n    return has3d;\n  }\n\n  function createElement(type) {\n    return document.createElement(type);\n  }\n\n  var maxZ = 52;\n\n  function _card(i) {\n    var transform = prefix('transform');\n\n    // calculate rank/suit, etc..\n    var rank = i % 13 + 1;\n    var suit = i / 13 | 0;\n    var z = (52 - i) / 4;\n\n    // create elements\n    var $el = createElement('div');\n    var $face = createElement('div');\n    var $back = createElement('div');\n\n    // states\n    var isDraggable = false;\n    var isFlippable = false;\n\n    // self = card\n    var self = { i: i, rank: rank, suit: suit, pos: i, $el: $el, mount: mount, unmount: unmount, setSide: setSide };\n\n    var modules = Deck.modules;\n    var module;\n\n    // add classes\n    $face.classList.add('face');\n    $back.classList.add('back');\n\n    // add default transform\n    $el.style[transform] = translate(-z + 'px', -z + 'px');\n\n    // add default values\n    self.x = -z;\n    self.y = -z;\n    self.z = z;\n    self.rot = 0;\n\n    // set default side to back\n    self.setSide('back');\n\n    // add drag/click listeners\n    addListener($el, 'mousedown', onMousedown);\n    addListener($el, 'touchstart', onMousedown);\n\n    // load modules\n    for (module in modules) {\n      addModule(modules[module]);\n    }\n\n    self.animateTo = function (params) {\n      var delay = params.delay;\n      var duration = params.duration;\n      var _params$x = params.x;\n      var x = _params$x === undefined ? self.x : _params$x;\n      var _params$y = params.y;\n      var y = _params$y === undefined ? self.y : _params$y;\n      var _params$rot = params.rot;\n      var rot = _params$rot === undefined ? self.rot : _params$rot;\n      var ease$$ = params.ease;\n      var onStart = params.onStart;\n      var onProgress = params.onProgress;\n      var onComplete = params.onComplete;\n\n      var startX, startY, startRot;\n      var diffX, diffY, diffRot;\n\n      animationFrames(delay, duration).start(function () {\n        startX = self.x || 0;\n        startY = self.y || 0;\n        startRot = self.rot || 0;\n        onStart && onStart();\n      }).progress(function (t) {\n        var et = ease[ease$$ || 'cubicInOut'](t);\n\n        diffX = x - startX;\n        diffY = y - startY;\n        diffRot = rot - startRot;\n\n        onProgress && onProgress(t, et);\n\n        self.x = startX + diffX * et;\n        self.y = startY + diffY * et;\n        self.rot = startRot + diffRot * et;\n\n        $el.style[transform] = translate(self.x + 'px', self.y + 'px') + (diffRot ? 'rotate(' + self.rot + 'deg)' : '');\n      }).end(function () {\n        onComplete && onComplete();\n      });\n    };\n\n    // set rank & suit\n    self.setRankSuit = function (rank, suit) {\n      var suitName = SuitName(suit);\n      $el.setAttribute('class', 'card ' + suitName + ' rank' + rank);\n    };\n\n    self.setRankSuit(rank, suit);\n\n    self.enableDragging = function () {\n      // this activates dragging\n      if (isDraggable) {\n        // already is draggable, do nothing\n        return;\n      }\n      isDraggable = true;\n      $el.style.cursor = 'move';\n    };\n\n    self.enableFlipping = function () {\n      if (isFlippable) {\n        // already is flippable, do nothing\n        return;\n      }\n      isFlippable = true;\n    };\n\n    self.disableFlipping = function () {\n      if (!isFlippable) {\n        // already disabled flipping, do nothing\n        return;\n      }\n      isFlippable = false;\n    };\n\n    self.disableDragging = function () {\n      if (!isDraggable) {\n        // already disabled dragging, do nothing\n        return;\n      }\n      isDraggable = false;\n      $el.style.cursor = '';\n    };\n\n    return self;\n\n    function addModule(module) {\n      // add card module\n      module.card && module.card(self);\n    }\n\n    function onMousedown(e) {\n      var startPos = {};\n      var pos = {};\n      var starttime = Date.now();\n\n      e.preventDefault();\n\n      // get start coordinates and start listening window events\n      if (e.type === 'mousedown') {\n        startPos.x = pos.x = e.clientX;\n        startPos.y = pos.y = e.clientY;\n        addListener(window, 'mousemove', onMousemove);\n        addListener(window, 'mouseup', onMouseup);\n      } else {\n        startPos.x = pos.x = e.touches[0].clientX;\n        startPos.y = pos.y = e.touches[0].clientY;\n        addListener(window, 'touchmove', onMousemove);\n        addListener(window, 'touchend', onMouseup);\n      }\n\n      if (!isDraggable) {\n        // is not draggable, do nothing\n        return;\n      }\n\n      // move card\n      $el.style[transform] = translate(self.x + 'px', self.y + 'px') + (self.rot ? ' rotate(' + self.rot + 'deg)' : '');\n      $el.style.zIndex = maxZ++;\n\n      function onMousemove(e) {\n        if (!isDraggable) {\n          // is not draggable, do nothing\n          return;\n        }\n        if (e.type === 'mousemove') {\n          pos.x = e.clientX;\n          pos.y = e.clientY;\n        } else {\n          pos.x = e.touches[0].clientX;\n          pos.y = e.touches[0].clientY;\n        }\n\n        // move card\n        $el.style[transform] = translate(Math.round(self.x + pos.x - startPos.x) + 'px', Math.round(self.y + pos.y - startPos.y) + 'px') + (self.rot ? ' rotate(' + self.rot + 'deg)' : '');\n      }\n\n      function onMouseup(e) {\n        if (isFlippable && Date.now() - starttime < 200) {\n          // flip sides\n          self.setSide(self.side === 'front' ? 'back' : 'front');\n        }\n        if (e.type === 'mouseup') {\n          removeListener(window, 'mousemove', onMousemove);\n          removeListener(window, 'mouseup', onMouseup);\n        } else {\n          removeListener(window, 'touchmove', onMousemove);\n          removeListener(window, 'touchend', onMouseup);\n        }\n        if (!isDraggable) {\n          // is not draggable, do nothing\n          return;\n        }\n\n        // set current position\n        self.x = self.x + pos.x - startPos.x;\n        self.y = self.y + pos.y - startPos.y;\n      }\n    }\n\n    function mount(target) {\n      // mount card to target (deck)\n      target.appendChild($el);\n\n      self.$root = target;\n    }\n\n    function unmount() {\n      // unmount from root (deck)\n      self.$root && self.$root.removeChild($el);\n      self.$root = null;\n    }\n\n    function setSide(newSide) {\n      // flip sides\n      if (newSide === 'front') {\n        if (self.side === 'back') {\n          $el.removeChild($back);\n        }\n        self.side = 'front';\n        $el.appendChild($face);\n        self.setRankSuit(self.rank, self.suit);\n      } else {\n        if (self.side === 'front') {\n          $el.removeChild($face);\n        }\n        self.side = 'back';\n        $el.appendChild($back);\n        $el.setAttribute('class', 'card');\n      }\n    }\n  }\n\n  function SuitName(suit) {\n    // return suit name from suit value\n    return suit === 0 ? 'spades' : suit === 1 ? 'hearts' : suit === 2 ? 'clubs' : suit === 3 ? 'diamonds' : 'joker';\n  }\n\n  function addListener(target, name, listener) {\n    target.addEventListener(name, listener);\n  }\n\n  function removeListener(target, name, listener) {\n    target.removeEventListener(name, listener);\n  }\n\n  var ease = {\n    linear: function linear(t) {\n      return t;\n    },\n    quadIn: function quadIn(t) {\n      return t * t;\n    },\n    quadOut: function quadOut(t) {\n      return t * (2 - t);\n    },\n    quadInOut: function quadInOut(t) {\n      return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n    },\n    cubicIn: function cubicIn(t) {\n      return t * t * t;\n    },\n    cubicOut: function cubicOut(t) {\n      return --t * t * t + 1;\n    },\n    cubicInOut: function cubicInOut(t) {\n      return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n    },\n    quartIn: function quartIn(t) {\n      return t * t * t * t;\n    },\n    quartOut: function quartOut(t) {\n      return 1 - --t * t * t * t;\n    },\n    quartInOut: function quartInOut(t) {\n      return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n    },\n    quintIn: function quintIn(t) {\n      return t * t * t * t * t;\n    },\n    quintOut: function quintOut(t) {\n      return 1 + --t * t * t * t * t;\n    },\n    quintInOut: function quintInOut(t) {\n      return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n    }\n  };\n\n  var flip = {\n    deck: function deck(_deck) {\n      _deck.flip = _deck.queued(flip);\n\n      function flip(next, side) {\n        var flipped = _deck.cards.filter(function (card) {\n          return card.side === 'front';\n        }).length / _deck.cards.length;\n\n        _deck.cards.forEach(function (card, i) {\n          card.setSide(side ? side : flipped > 0.5 ? 'back' : 'front');\n        });\n        next();\n      }\n    }\n  };\n\n  var sort = {\n    deck: function deck(_deck2) {\n      _deck2.sort = _deck2.queued(sort);\n\n      function sort(next, reverse) {\n        var cards = _deck2.cards;\n\n        cards.sort(function (a, b) {\n          if (reverse) {\n            return a.i - b.i;\n          } else {\n            return b.i - a.i;\n          }\n        });\n\n        cards.forEach(function (card, i) {\n          card.sort(i, cards.length, function (i) {\n            if (i === cards.length - 1) {\n              next();\n            }\n          }, reverse);\n        });\n      }\n    },\n    card: function card(_card2) {\n      var $el = _card2.$el;\n\n      _card2.sort = function (i, len, cb, reverse) {\n        var z = i / 4;\n        var delay = i * 10;\n\n        _card2.animateTo({\n          delay: delay,\n          duration: 400,\n\n          x: -z,\n          y: -150,\n          rot: 0,\n\n          onComplete: function onComplete() {\n            $el.style.zIndex = i;\n          }\n        });\n\n        _card2.animateTo({\n          delay: delay + 500,\n          duration: 400,\n\n          x: -z,\n          y: -z,\n          rot: 0,\n\n          onComplete: function onComplete() {\n            cb(i);\n          }\n        });\n      };\n    }\n  };\n\n  function plusminus(value) {\n    var plusminus = Math.round(Math.random()) ? -1 : 1;\n\n    return plusminus * value;\n  }\n\n  function fisherYates(array) {\n    var rnd, temp;\n\n    for (var i = array.length - 1; i; i--) {\n      rnd = Math.random() * i | 0;\n      temp = array[i];\n      array[i] = array[rnd];\n      array[rnd] = temp;\n    }\n\n    return array;\n  }\n\n  function fontSize() {\n    return window.getComputedStyle(document.body).getPropertyValue('font-size').slice(0, -2);\n  }\n\n  var ____fontSize;\n\n  var shuffle = {\n    deck: function deck(_deck3) {\n      _deck3.shuffle = _deck3.queued(shuffle);\n\n      function shuffle(next) {\n        var cards = _deck3.cards;\n\n        ____fontSize = fontSize();\n\n        fisherYates(cards);\n\n        cards.forEach(function (card, i) {\n          card.pos = i;\n\n          card.shuffle(function (i) {\n            if (i === cards.length - 1) {\n              next();\n            }\n          });\n        });\n        return;\n      }\n    },\n\n    card: function card(_card3) {\n      var $el = _card3.$el;\n\n      _card3.shuffle = function (cb) {\n        var i = _card3.pos;\n        var z = i / 4;\n        var delay = i * 2;\n\n        _card3.animateTo({\n          delay: delay,\n          duration: 200,\n\n          x: plusminus(Math.random() * 40 + 20) * ____fontSize / 16,\n          y: -z,\n          rot: 0\n        });\n        _card3.animateTo({\n          delay: 200 + delay,\n          duration: 200,\n\n          x: -z,\n          y: -z,\n          rot: 0,\n\n          onStart: function onStart() {\n            $el.style.zIndex = i;\n          },\n\n          onComplete: function onComplete() {\n            cb(i);\n          }\n        });\n      };\n    }\n  };\n\n  var __fontSize;\n\n  var poker = {\n    deck: function deck(_deck4) {\n      _deck4.poker = _deck4.queued(poker);\n\n      function poker(next) {\n        var cards = _deck4.cards;\n        var len = cards.length;\n\n        __fontSize = fontSize();\n\n        cards.slice(-5).reverse().forEach(function (card, i) {\n          card.poker(i, len, function (i) {\n            card.setSide('front');\n            if (i === 4) {\n              next();\n            }\n          });\n        });\n      }\n    },\n    card: function card(_card4) {\n      var $el = _card4.$el;\n\n      _card4.poker = function (i, len, cb) {\n        var delay = i * 250;\n\n        _card4.animateTo({\n          delay: delay,\n          duration: 250,\n\n          x: Math.round((i - 2.05) * 70 * __fontSize / 16),\n          y: Math.round(-110 * __fontSize / 16),\n          rot: 0,\n\n          onStart: function onStart() {\n            $el.style.zIndex = len - 1 + i;\n          },\n          onComplete: function onComplete() {\n            cb(i);\n          }\n        });\n      };\n    }\n  };\n\n  var intro = {\n    deck: function deck(_deck5) {\n      _deck5.intro = _deck5.queued(intro);\n\n      function intro(next) {\n        var cards = _deck5.cards;\n\n        cards.forEach(function (card, i) {\n          card.setSide('front');\n          card.intro(i, function (i) {\n            animationFrames(250, 0).start(function () {\n              card.setSide('back');\n            });\n            if (i === cards.length - 1) {\n              next();\n            }\n          });\n        });\n      }\n    },\n    card: function card(_card5) {\n      var transform = prefix('transform');\n\n      var $el = _card5.$el;\n\n      _card5.intro = function (i, cb) {\n        var delay = 500 + i * 10;\n        var z = i / 4;\n\n        $el.style[transform] = translate(-z + 'px', '-250px');\n        $el.style.opacity = 0;\n\n        _card5.x = -z;\n        _card5.y = -250 - z;\n        _card5.rot = 0;\n\n        _card5.animateTo({\n          delay: delay,\n          duration: 1000,\n\n          x: -z,\n          y: -z,\n\n          onStart: function onStart() {\n            $el.style.zIndex = i;\n          },\n          onProgress: function onProgress(t) {\n            $el.style.opacity = t;\n          },\n          onComplete: function onComplete() {\n            $el.style.opacity = '';\n            cb && cb(i);\n          }\n        });\n      };\n    }\n  };\n\n  var _fontSize;\n\n  var fan = {\n    deck: function deck(_deck6) {\n      _deck6.fan = _deck6.queued(fan);\n\n      function fan(next) {\n        var cards = _deck6.cards;\n        var len = cards.length;\n\n        _fontSize = fontSize();\n\n        cards.forEach(function (card, i) {\n          card.fan(i, len, function (i) {\n            if (i === cards.length - 1) {\n              next();\n            }\n          });\n        });\n      }\n    },\n    card: function card(_card6) {\n      var $el = _card6.$el;\n\n      _card6.fan = function (i, len, cb) {\n        var z = i / 4;\n        var delay = i * 10;\n        var rot = i / (len - 1) * 260 - 130;\n\n        _card6.animateTo({\n          delay: delay,\n          duration: 300,\n\n          x: -z,\n          y: -z,\n          rot: 0\n        });\n        _card6.animateTo({\n          delay: 300 + delay,\n          duration: 300,\n\n          x: Math.cos(deg2rad(rot - 90)) * 55 * _fontSize / 16,\n          y: Math.sin(deg2rad(rot - 90)) * 55 * _fontSize / 16,\n          rot: rot,\n\n          onStart: function onStart() {\n            $el.style.zIndex = i;\n          },\n\n          onComplete: function onComplete() {\n            cb(i);\n          }\n        });\n      };\n    }\n  };\n\n  function deg2rad(degrees) {\n    return degrees * Math.PI / 180;\n  }\n\n  var ___fontSize;\n\n  var bysuit = {\n    deck: function deck(_deck7) {\n      _deck7.bysuit = _deck7.queued(bysuit);\n\n      function bysuit(next) {\n        var cards = _deck7.cards;\n\n        ___fontSize = fontSize();\n\n        cards.forEach(function (card) {\n          card.bysuit(function (i) {\n            if (i === cards.length - 1) {\n              next();\n            }\n          });\n        });\n      }\n    },\n    card: function card(_card7) {\n      var rank = _card7.rank;\n      var suit = _card7.suit;\n\n      _card7.bysuit = function (cb) {\n        var i = _card7.i;\n        var delay = i * 10;\n\n        _card7.animateTo({\n          delay: delay,\n          duration: 400,\n\n          x: -Math.round((6.75 - rank) * 8 * ___fontSize / 16),\n          y: -Math.round((1.5 - suit) * 92 * ___fontSize / 16),\n          rot: 0,\n\n          onComplete: function onComplete() {\n            cb(i);\n          }\n        });\n      };\n    }\n  };\n\n  function queue(target) {\n    var array = Array.prototype;\n\n    var queueing = [];\n\n    target.queue = queue;\n    target.queued = queued;\n\n    return target;\n\n    function queued(action) {\n      return function () {\n        var self = this;\n        var args = arguments;\n\n        queue(function (next) {\n          action.apply(self, array.concat.apply(next, args));\n        });\n      };\n    }\n\n    function queue(action) {\n      if (!action) {\n        return;\n      }\n\n      queueing.push(action);\n\n      if (queueing.length === 1) {\n        next();\n      }\n    }\n    function next() {\n      queueing[0](function (err) {\n        if (err) {\n          throw err;\n        }\n\n        queueing = queueing.slice(1);\n\n        if (queueing.length) {\n          next();\n        }\n      });\n    }\n  }\n\n  function observable(target) {\n    target || (target = {});\n    var listeners = {};\n\n    target.on = on;\n    target.one = one;\n    target.off = off;\n    target.trigger = trigger;\n\n    return target;\n\n    function on(name, cb, ctx) {\n      listeners[name] || (listeners[name] = []);\n      listeners[name].push({ cb: cb, ctx: ctx });\n    }\n\n    function one(name, cb, ctx) {\n      listeners[name] || (listeners[name] = []);\n      listeners[name].push({\n        cb: cb, ctx: ctx, once: true\n      });\n    }\n\n    function trigger(name) {\n      var self = this;\n      var args = Array.prototype.slice(arguments, 1);\n\n      var currentListeners = listeners[name] || [];\n\n      currentListeners.filter(function (listener) {\n        listener.cb.apply(self, args);\n\n        return !listener.once;\n      });\n    }\n\n    function off(name, cb) {\n      if (!name) {\n        listeners = {};\n        return;\n      }\n\n      if (!cb) {\n        listeners[name] = [];\n        return;\n      }\n\n      listeners[name] = listeners[name].filter(function (listener) {\n        return listener.cb !== cb;\n      });\n    }\n  }\n\n  function Deck(jokers) {\n    // init cards array\n    var cards = new Array(jokers ? 55 : 52);\n\n    var $el = createElement('div');\n    var self = observable({ mount: mount, unmount: unmount, cards: cards, $el: $el });\n    var $root;\n\n    var modules = Deck.modules;\n    var module;\n\n    // make queueable\n    queue(self);\n\n    // load modules\n    for (module in modules) {\n      addModule(modules[module]);\n    }\n\n    // add class\n    $el.classList.add('deck');\n\n    var card;\n\n    // create cards\n    for (var i = cards.length; i; i--) {\n      card = cards[i - 1] = _card(i - 1);\n      card.mount($el);\n    }\n\n    return self;\n\n    function mount(root) {\n      // mount deck to root\n      $root = root;\n      $root.appendChild($el);\n    }\n\n    function unmount() {\n      // unmount deck from root\n      $root.removeChild($el);\n    }\n\n    function addModule(module) {\n      module.deck && module.deck(self);\n    }\n  }\n  Deck.animationFrames = animationFrames;\n  Deck.ease = ease;\n  Deck.modules = { bysuit: bysuit, fan: fan, intro: intro, poker: poker, shuffle: shuffle, sort: sort, flip: flip };\n  Deck.Card = _card;\n  Deck.prefix = prefix;\n  Deck.translate = translate;\n\n  return Deck;\n})();\n"},847:function(n,e){n.exports=function(n){"undefined"!=typeof execScript?execScript(n):eval.call(null,n)}},851:function(n,e,t){n.exports=t(446)}},[851]);
//# sourceMappingURL=scripts.5097b517bebc27d2cc58.bundle.map